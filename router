#!/usr/bin/python3

import argparse, socket, time, json, select, struct, math

# DEBUG = True
DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"
TABL = "table"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"

# origins
INGP = "IGP"
EXGP = "EGP"
UNKN = "UNK"


##########################################################################################

class Router:
    routes = None
    updates = None
    relations = None
    sockets = None

    def __init__(self, networks):
        self.routes = {}  # source IP : message
        self.updates = {}  # ????? : packet
        self.relations = {}  # IP Address : relationship
        self.sockets = {}  # IP Address : socket
        for relationship in networks:
            network, relation = relationship.split("-")
            if DEBUG:
                print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        # TODO
        outroutes = []
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return outroutes

    def get_highest_preference(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return outroutes

    def get_self_origin(self, routes):
        """ select self originating routes """
        # TODO
        outroutes = []
        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: EGP > IGP > UNK """
        # TODO
        outroutes = []
        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        return outroutes

    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        # TODO
        peer = None
        routes = lookup_routers(daddr)
        # Rules go here
        if routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. EGP > IGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            # TODO
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
        return self.sockets[peer] if peer else None

    def forward(self, srcif, packet):
        """	Forward a data packet	"""
        # TODO
        return False

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        """	handle update packets	"""
        # 1. Save copy of announcement (should the key be the src IP or the src socket?
        self.updates[srcif] = packet
        # 2. Add an entry to the forwarding table
        if (packet[MESG][NTWK] in self.routes):
            self.routes[packet[MESG][NTWK]] = self.compare_route(self.routes[packet[MESG][NTWK]], packet[MESG])
        else:
            self.routes[packet[MESG][NTWK]] = packet[MESG]
        # 3. Potentially send copies of the announcement to neighboring routers
        if (self.relations[packet[SRCE]] == PEER):
            """ send to everyone """
        else:
            """ send to customers"""

        return False


def revoke(self, packet):
    """	handle revoke packets	"""
    # TODO
    return True


def dump(self, packet):
    """	handles dump table requests	"""
    # TODO
    return True


def handle_packet(self, srcif, packet):
    """	dispatches a packet """
    packet_type = packet[TYPE]
    if (packet_type == DATA):
        pass
    elif (packet_type == UPDT):
        self.update(self, srcif, packet)
    elif (packet_type == RVKE):
        pass
    elif (packet_type == DUMP):
        pass
    elif (packet_type == NRTE):
        pass
    elif (packet_type == TABL):
        pass

    return False


def send_error(self, conn, msg):
    """ Send a no_route error message """
    # TODO
    return None

    def compare_route(self, curr_msg, other_msg):
        """ 1 if curr_msg is a better route than other_msg """
        """ 0 if curr_msg is the same route as other_msg """
        """ -1 if curr_msg is a worse route than other_msg """
        if self.compare_localpref(curr_msg, other_msg) == 0:
            if self.compare_selfOrigin(curr_msg, other_msg) == 0:
                if self.compare_ASPath(curr_msg, other_msg) == 0:
                    if self.compare_origin(curr_msg, other_msg) == 0:
                        return 0
                    else:
                        return self.compare_origin(curr_msg, other_msg)
                else:
                    return self.compare_ASPath(curr_msg, other_msg)
            else:
                return self.compare_selfOrigin(curr_msg, other_msg)
        else:
            return self.compare_localpref(curr_msg, other_msg)

    def compare_localpref(self, curr_msg, other_msg):
        """ 1 if curr_msg has a better localpref than other_msg """
        """ 0 if curr_msg has the same localpref as other_msg """
        """ -1 if curr_msg has a worse localpref than other_msg """
        if (curr_msg[LPRF] > other_msg[LPRF]):
            return 1
        elif (curr_msg[LPRF] == other_msg[LPRF]):
            return 0
        elif (curr_msg[LPRF] < other_msg[LPRF]):
            return -1

    def compare_selfOrigin(self, curr_msg, other_msg):
        """ 1 if curr_msg has a better selfOrigin than other_msg """
        """ 0 if curr_msg has the same selfOrigin as other_msg """
        """ -1 if curr_msg has a worse selfOrigin than other_msg """
        if (curr_msg[SORG] & & !other_msg[SORG]):
            return 1
        elif (curr_msg[SORG] & & other_msg[SORG]):
            return 0
        elif (!curr_msg[SORG] & & other_msg[SORG]):
            return -1

    def compare_ASPath(self, curr_msg, other_msg):
        """ 1 if curr_msg has a better ASPath than other_msg """
        """ 0 if curr_msg has the same ASPath as other_msg """
        """ -1 if curr_msg has a worse ASPath than other_msg """
        if (len(curr_msg[APTH]) < len(other_msg[APTH])):
            return 1
        elif (len(curr_msg[APTH]) == len(other_msg[APTH])):
            return 0
        elif (len(curr_msg[APTH]) > len(other_msg[APTH])):
            return -1

    def compare_origin(self, curr_msg, other_msg):
        """ 1 if curr_msg has a better origin than other_msg
         0 if curr_msg has the same origin as other_msg
        -1 if curr_msg has a worse origin than other_msg """
        if ((curr_msg[ORIG] == INGP & & other_msg[ORIG] != INGP) | | (
                            curr_msg[ORIG] == ENGP & & other_msg[ORIG] != INGP & & other_msg[ORIG] != ENGP)):
            return 1
        elif (curr_msg[ORIG] == other_msg[ORIG]):
            return 0
        elif ((curr_msg[ORIG] == UNKN & & other_msg[ORIG] != UNKN) | | (
                            curr_msg[ORIG] == ENGP & & other_msg[ORIG] != UNKN & & other_msg[ORIG] != ENGP)):
            return -1

    def apply_netmask(self, network, netmask):
        """ applies the given netmask to the given network, returns the result as a string"""
        nw = network.split('.')
        nm = netmask.split('.')
        netmasked = []
        for part in range(len(nw)):
            netmasked.append(nw[part] & nm[part])

        return '.'.join(netmasked)


def run(self):
    while True:
        socks = select.select(self.sockets.values(), [], [], 0.1)[0]
        for conn in socks:
            try:
                k = conn.recv(65535)
            except:
                # either died on a connection reset, or was SIGTERM's by parent
                return
            if k:
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                msg = json.loads(k)
                if not self.handle_packet(srcif, msg):
                    self.send_error(conn, msg)
            else:
                return
    return


if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
