#!/usr/bin/python3

import argparse, socket, time, json, select, struct, math, functools, copy

DEBUG = True
#DEBUG = False

parser = argparse.ArgumentParser(description='route packets')
parser.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
args = parser.parse_args()

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"
TABL = "table"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"

# origins
INGP = "IGP"
EXGP = "EGP"
UNKN = "UNK"

def mask_2_cidr(mask):
    n = 0
    m = mask.split(".")
    for i in range(len(m)):
        m[i] = bin(int(m[i]))
    m_str = ''.join(m)
    return m_str.count('1')

def cidr_2_mask(cidr):
    m = ""
    for i in range(1, 33):
        if i <= cidr:
            m += '1'
        else:
            m += '0'
        if i%8 ==0:
            m += '.'
    m = m[:-1]
    b = m.split('.')
    d = []
    # print("array", b)
    for i in range(len(b)):
        d.append(str(int(b[i], 2)))
    return ".".join(d)

def apply_netmask(network, netmask):
    """ applies the given subnet mask to the given network, returns the result as a string"""
    nw = network.split('.')
    nm = netmask.split('.')
    netmasked = []
    for part in range(len(nw)):
        netmasked.append(str(int(nw[part]) & int(nm[part])))
    return '.'.join(netmasked)

def in_subnet(network1, network2, netmask):
    """ applies the given netmask to the networks, True if the results are the same"""
    subnet1 = apply_netmask(network1, netmask)
    subnet2 = apply_netmask(network2, netmask)
    return subnet1 == subnet2


def aggregate(curr_msg, other_msg):
    if (curr_msg != other_msg and
        compare_longest_prefix(curr_msg, other_msg) == 0 and
        compare_localpref(curr_msg, other_msg) == 0 and
        compare_selfOrigin(curr_msg, other_msg) == 0 and
        compare_ASPath(curr_msg, other_msg) == 0 and
        compare_origin(curr_msg, other_msg) == 0 and
        compare_peer(curr_msg, other_msg) == 0):
            # print("Aggregate", curr_msg, other_msg)
            network1 = curr_msg[NTWK]
            network2 = other_msg[NTWK]
            mask = curr_msg[NMSK]
            # print("Initial mask", mask)
            mask_1 = cidr_2_mask(mask_2_cidr(mask) - 1)
            # print("Mask -1", mask_1)
            if apply_netmask(network1, mask_1) == apply_netmask(network2, mask_1):
                new_msg = copy.copy(curr_msg)
                new_msg[NTWK] = apply_netmask(network1, mask_1)
                new_msg[NMSK] = mask_1
                # print("Aggregation complete", new_msg)
                return new_msg
    return None






def compare_route(curr_msg, other_msg):
    """ 1 if curr_msg is a better route than other_msg
     0 if curr_msg is the same route as other_msg
    -1 if curr_msg is a worse route than other_msg """
    if compare_longest_prefix(curr_msg, other_msg) == 0:
        if compare_localpref(curr_msg, other_msg) == 0:
            if compare_selfOrigin(curr_msg, other_msg) == 0:
                if compare_ASPath(curr_msg, other_msg) == 0:
                    if compare_origin(curr_msg, other_msg) == 0:
                        return compare_ip(curr_msg, other_msg)
                    else:
                        return compare_origin(curr_msg, other_msg)
                else:
                    return compare_ASPath(curr_msg, other_msg)
            else:
                return compare_selfOrigin(curr_msg, other_msg)
        else:
            return compare_localpref(curr_msg, other_msg)
    else:
        return compare_longest_prefix(curr_msg, other_msg)

def compare_peer(curr_msg, other_msg):
    if curr_msg[PEER] > other_msg[PEER]:
        return 1
    elif other_msg[PEER] > curr_msg[PEER]:
        return -1
    else:
        return 0


# FIX it
def compare_longest_prefix(curr_msg, other_msg):
    nw = curr_msg[NMSK].split('.')
    nw2 = other_msg[NMSK].split('.')
    for part in range(len(nw)):
        if int(nw[part]) < int(nw2[part]):
            return -1
        elif int(nw[part]) > int(nw2[part]):
            return 1
    return 0

def compare_ip(curr_msg, other_msg):
    """ applies the given subnet mask to the given network, returns the result as a string"""
    nw = curr_msg[PEER].split('.')
    nw2 = other_msg[PEER].split('.')
    for part in range(len(nw)):
        if int(nw[part]) < int(nw2[part]):
            return 1
        elif int(nw[part]) > int(nw2[part]):
            return -1
    return 0


def compare_localpref(curr_msg, other_msg):
    """ 1 if curr_msg has a better localpref than other_msg
     0 if curr_msg has the same localpref as other_msg
     -1 if curr_msg has a worse localpref than other_msg """
    if (int(curr_msg[LPRF]) > int(other_msg[LPRF])):
        return 1
    elif (int(curr_msg[LPRF]) == int(other_msg[LPRF])):
        return 0
    elif (int(curr_msg[LPRF]) < int(other_msg[LPRF])):
        return -1


def compare_selfOrigin(curr_msg, other_msg):
    """ 1 if curr_msg has a better selfOrigin than other_msg
     0 if curr_msg has the same selfOrigin as other_msg
     -1 if curr_msg has a worse selfOrigin than other_msg """

    if curr_msg[SORG] == 'True' and other_msg[SORG] == 'False':
        return 1
    elif curr_msg[SORG] == 'False' and other_msg[SORG] == 'True':
        return -1
    else:
        return 0



def compare_ASPath(curr_msg, other_msg):
    """ 1 if curr_msg has a better ASPath than other_msg
     0 if curr_msg has the same ASPath as other_msg
     -1 if curr_msg has a worse ASPath than other_msg """
    if (len(curr_msg[APTH]) < len(other_msg[APTH])):
        return 1
    elif (len(curr_msg[APTH]) == len(other_msg[APTH])):
        return 0
    elif (len(curr_msg[APTH]) > len(other_msg[APTH])):
        return -1


def compare_origin(curr_msg, other_msg):
    """ 1 if curr_msg has a better origin than other_msg
     0 if curr_msg has the same origin as other_msg
    -1 if curr_msg has a worse origin than other_msg """

    if ((curr_msg[ORIG] == INGP and other_msg[ORIG] != INGP) or (
                        curr_msg[ORIG] == EXGP and other_msg[ORIG] != INGP and other_msg[ORIG] != EXGP)):
        return 1

    elif (curr_msg[ORIG] == other_msg[ORIG]):
        return 0

    else:
        return -1

class Router:
    routes = None
    updates = None
    relations = None
    sockets = None

    def __init__(self, networks):
        self.routes = []  # source IP : message
        self.updates = []  # ????? : packet
        self.revokes = []
        self.relations = {}  # IP Address : relationship
        self.sockets = {}  # IP Address : socket
        for relationship in networks:
            network, relation = relationship.split("-")
            # if DEBUG:
            #     print("Starting socket for", network, relation)
            self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
            self.sockets[network].setblocking(0)
            self.sockets[network].connect(network)
            self.relations[network] = relation
        return

    def lookup_routes(self, daddr):
        """ Lookup all valid routes for an address """
        # TODO
        outroutes = []
        return outroutes

    def get_shortest_as_path(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return outroutes

    def get_highest_preference(self, routes):
        """ select the route with the shortest AS Path """
        # TODO
        outroutes = []
        return outroutes

    def get_self_origin(self, routes):
        """ select self originating routes """
        # TODO
        outroutes = []
        return outroutes

    def get_origin_routes(self, routes):
        """ select origin routes: EGP > IGP > UNK """
        # TODO
        outroutes = []
        return outroutes

    def filter_relationships(self, srcif, routes):
        """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
        outroutes = []
        return outroutes

    def aggregation(self):
        new_routes = []
        was_aggregated = False
        for route in self.routes:
            for route2 in self.routes:
                new_route = aggregate(route, route2)
                if new_route is not None:
                    if not new_route in new_routes:
                        self.routes.remove(route)
                        self.routes.remove(route2)
                        self.routes.append(new_route)
                        return True
        return False


    def get_route(self, srcif, daddr):
        """	Select the best route for a given address	"""
        # TODO
        peer = None
        routes = lookup_routers(daddr)
        # Rules go here
        if routes:
            # 1. Highest Preference
            routes = self.get_highest_preference(routes)
            # 2. Self Origin
            routes = self.get_self_origin(routes)
            # 3. Shortest ASPath
            routes = self.get_shortest_as_path(routes)
            # 4. EGP > IGP > UNK
            routes = self.get_origin_routes(routes)
            # 5. Lowest IP Address
            # TODO
            # Final check: enforce peering relationships
            routes = self.filter_relationships(srcif, routes)
        return self.sockets[peer] if peer else None

    def forward(self, srcif, packet):
        """	Forward a data packet	"""
        # if DEBUG:
        #     print("Data :", packet)

            # for r in self.routes:
            #     print("Routing table entry:", r[NTWK], r[NMSK], r[PEER])
            # print("Sockets ips:", self.sockets.keys())
        ip = packet[DEST]
        destinations = []
        for item in self.routes:
            network = item[NTWK]
            mask = item[NMSK]
            peer = item[PEER]
            if in_subnet(network,ip,mask):
                    # and (self.relations[peer] == CUST or self.relations[srcif] == CUST):
                destinations.append(item)

        to = sorted(destinations, key= functools.cmp_to_key(compare_route), reverse = True)
        # for d in to:
        #     print("SORTED ROW", d)
        local = to[0][PEER]
        local1 = self.relations[local]
        local2 = self.relations[srcif]
        if len(to) > 0 and (local1 == CUST or local2 == CUST):
            # print("SEND TO:", to[0][PEER])
            self.sockets[to[0][PEER]].send(json.dumps(packet).encode("ascii"))
            return True
        else:
            # print("SEND NO ROUTE", self.relations[srcif], self.relations[to[0][PEER]])
            return False


    def compare(self, a):
        return len(a[APTH])

    def coalesce(self):
        """	coalesce any routes that are right next to each other	"""
        # TODO (this is the most difficult task, save until last)
        return False

    def update(self, srcif, packet):
        """	handle update packets	"""
        # 1. Save copy of announcement (should the key be the src IP or the src socket?
        # 2. Add an entry to the forwarding table
        # 3. Potentially send copies of the announcement to neighboring routers
        # TODO: need to change compare_route
        #if DEBUG:
            #print("Recieve the update packet:", packet)
        self.updates.append(copy.copy(packet))
        # if (packet[MESG][NTWK] in self.routes) and \
        #         (self.compare_route(self.routes[packet[MESG][NTWK]],packet[MESG]) == 1):
        #         if DEBUG:
        #             print("The rejected entry is ", packet[MESG])
        # else:
        self.routes.append({NTWK: packet[MESG][NTWK],
                                               NMSK: packet[MESG][NMSK],
                                               PEER: packet[SRCE],
                                               LPRF: packet[MESG][LPRF],
                                               SORG: packet[MESG][SORG],
                                               APTH: packet[MESG][APTH],
                                               ORIG: packet[MESG][ORIG]})


        while(self.aggregation()):
            continue
        src = packet[SRCE]
        dst = packet[DEST]

        if self.relations[src] == CUST:
            for ip, sock in self.sockets.items():
                if ip != src:
                    packet[SRCE] = dst
                    packet[DEST] = ip
                    # if DEBUG:
                    #     print("Forward the update packet:", packet)
                    sock.send(json.dumps(packet).encode("ascii"))
        else:
            for ip, sock in self.sockets.items():
                if ip != src and self.relations[ip] == CUST:
                    packet[SRCE] = dst
                    packet[DEST] = ip
                    # if DEBUG:
                    #     print("Forward the update packet:", packet)
                    sock.send(json.dumps(packet).encode("ascii"))



        return True

    def disagregate(self):
        routes = self.routes
        self.routes = []

        print ("\nBefore disagreg")
        for i in routes:
            print(i)
            print("\n")

        for packet in self.updates:
            if (packet[TYPE] == UPDT):
                self.routes.append({NTWK: packet[MESG][NTWK],
                                    NMSK: packet[MESG][NMSK],
                                    PEER: packet[SRCE],
                                    LPRF: packet[MESG][LPRF],
                                    SORG: packet[MESG][SORG],
                                    APTH: packet[MESG][APTH],
                                    ORIG: packet[MESG][ORIG]})
            elif (packet[TYPE] == RVKE):
                msg = packet[MESG]
                for item in msg:
                    for route in self.routes:
                        if (item[NTWK] == route[NTWK] and item[NMSK] == route[NMSK] and packet[SRCE] == route[PEER]):
                            # print("remove from table", route)
                            self.routes.remove(route)

        print ("\nBefore aggregating back")
        for i in self.routes:
            print(i)
            print("\n")

        if (routes == self.routes):
            print("SAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAME")
        else:
            print("NOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOT SAAAAAAAAAAAAAAAAAAAAAAAAAAAAME")
            print("\nold:")
            for i in routes:
                print(i)
                print("\n")
            print("\nnew:")
            for i in self.routes:
                print(i)
                print("\n")


        return True





    def revoke(self, packet):
        self.disagregate()
        # print("got revoke", packet)
        msg = packet[MESG]
        self.updates.append(copy.copy(packet))
        # for r in self.routes:
        #     print("Routing table entry:", r[NTWK], r[NMSK], r[PEER])
        for item in msg:
            for route in self.routes:
                if (item[NTWK] == route[NTWK] and item[NMSK] == route[NMSK] and packet[SRCE] == route[PEER]):
                    # print("remove from table", route)
                    self.routes.remove(route)

        while(self.aggregation()):
            continue

        # for r in self.routes:
        #     print("Routing table entry:", r[NTWK], r[NMSK], r[PEER])
        src = packet[SRCE]
        dst = packet[DEST]
        # print("send revoke from", dst)


        if self.relations[src] == CUST:
            for ip, sock in self.sockets.items():
                if ip != src:
                    packet[SRCE] = dst
                    packet[DEST] = ip
                    # print("Send revoke to", packet[DEST])
                    sock.send(json.dumps(packet).encode("ascii"))
        else:
            for ip, sock in self.sockets.items():
                if ip != src and self.relations[ip] == CUST:
                    packet[SRCE] = dst
                    packet[DEST] = ip
                    # print("Send revoke to", packet[DEST])
                    sock.send(json.dumps(packet).encode("ascii"))

        return True


    def dump(self, packet):
        """	handles dump table requests	"""
        # TODO
        respond = {}
        msg = []
        for item in self.routes:
            msg.append(item)
        respond[SRCE] = packet[DEST]
        respond[DEST] = packet[SRCE]
        respond[TYPE] = TABL
        respond[MESG] = msg
        # if DEBUG:
        #     print(respond)
        self.sockets[respond[DEST]].send(json.dumps(respond).encode("ascii"))
        return True


    def handle_packet(self, srcif, packet):
        # print("\n")
        """	dispatches a packet """
        packet_type = packet[TYPE]
        if packet_type == DATA:
            return self.forward(srcif, packet)

        elif packet_type == UPDT:
            return self.update(srcif, packet)
        elif packet_type == RVKE:
            # print("REVOKE MSG")
            return self.revoke(packet)
        elif packet_type == DUMP:
            return self.dump(packet)
        elif packet_type == TABL:
            pass

        # print("return to handle")
        return False


    def send_error(self, conn, msg):
        """ Send a no_route error message """
        # TODO
        # print("error handle !!!!!!!!!!!!!!!!!!!!!!!")
        to = ''
        for ip, sock in self.sockets.items():
            if sock == conn:
                to = ip
        packet = {}
        packet[SRCE] = to[:-1] + "1"
        packet[DEST] = msg[SRCE]
        packet[TYPE] = NRTE
        packet[MESG] = {}
        # print("send NRTE to", msg[SRCE])
        # print("send from", to[:-1] + "1")
        # self.sockets[self.sockets[conn]].send(json.dumps(packet).encode("ascii"))
        conn.send(json.dumps(packet).encode("ascii"))
        return None





    def run(self):
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                try:
                    k = conn.recv(65535)
                except:
                    # either died on a connection reset, or was SIGTERM's by parent
                    return
                if k:
                    for sock in self.sockets:
                        if self.sockets[sock] == conn:
                            srcif = sock

                    msg = json.loads(k.decode("ascii"))
                    if not self.handle_packet(srcif, msg):
                        self.send_error(conn, msg)
                else:
                    return



if __name__ == "__main__":
    router = Router(args.networks)
    router.run()
